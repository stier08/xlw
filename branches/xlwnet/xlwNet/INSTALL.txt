

PRE-REQUISITE
=============

This project requires Visual Studio 2008 Pro. This is an initial requirement only, in the early stages of development

xlw.NET depends on xlw (http://xlw.sourceforge.net/) xlw needs to be downloaded from the webste and installed.
Remember the path to where eit is installed. It then needs to be built (see xlw doc) 



INSTALLING
==========

1. Put the directory DotNet into your xlw install directory

2. Create an environment variable called XLW and set its value to the path of xlw

3. open up a command console and type the command gacutil.
   If the command is not recognised you have to add the directory containing gacutil to you PATH
   For me gacutil is in C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin
   So I added this to my PATH variable.
   Try opening the command console again and typing gacutil, it should now be recognised.

4. In the directory DotNet there is a VS9 solution file  xlw.NET.sln
   Open this up with VS9 and build the projects. ( Debug or Release ) 

5. Cloes the solution 

6. In the directory Example there is a VS9 solution file Example.sln
   Open this up with VS9 and build this project.

7. You can now add you C# functions into the C# project DotNet.

8. When you build this project, the main output ( Example.xll, Example.NET.dll & ExampleC.dll) will be in the directory
   Example/Debug or Example/Release. You can now use the xll in Excel BUT you must have the directory containg the resulting
   dlls on your on your PATH.

----------------------------------------------------------------------------------------------------


Creating you own xll Project
============================

DotNet
------

1.  In the DotNet Dirctory there is a directory called 'TemplateDirectory'. 
    Copy this to somehwre where you would like to work on your new project. It is best that you take a copy, rather than
    work in the original TemplateProject Directory.

2.  Change the name of the copy of the directory to the name of your new library, we'll refer to it as 'MyXll' from now on.

3.  Go into the directory 'MyXll' and change the name of of the solution file 'Template.sln' to the name of you library 
    e.g 'MyXll.sln'

4.  Open the solution with Visual Studio. You will find 3 projects ( 2 c++ and 1 C# )
    The dependency is as follows . XLL depends on DLL which depends on DotNet
 
5.  Right Click on the project 'DotNet' and select properties

6.  On the tab Application change the Assembley name  to you the name of your library appended by '.NET', for example
    MyXll.NET

7.  Change the Default namespace also to the name ofd you library

8.  Press on the Signing Tab.

9.  Ensure the checkbox for 'Sign the assembley' is checked.

10  For 'Choose a strong name key file:' select '<New...'>

11. Enter the name of you Library as the 'Key file name:'

12. uncheck 'Protect my key with a password' ( I haven't played about with this ) then Press 'OK'

13. Save the project seetings.

14. There is a folder icon under DotNet called properties, in there is a file AssembleyInfo.cs, you should
    fill out the neccessary details here 

15. Right click on the DotNet project and select Build



DLL
---

16. Right Click on the project DLL and go to 'Add', then select 'Existing Item' This will bring up a File Select Dialog Box.
    Browse to you project directory ( you may already be there ) and you will find a C++ source file with the name of you Library for
    example 'MyXll.cpp' select it so that it is added to you project.

17. Repeat step 15 for the header file, eg 'MyXll.h'

18. Right Click on the DLL project and go to 'Project Only' then select 'build DLL only'


XLL
---

19. Right Click on the project DLL and go to 'Add', then select 'Existing Item' This will bring up a File Select Dialog Box.
    Browse to you project directory ( you may already be there ) and you will find a C++ source file with the begining with 
   'xlw' followed by your library name for example xlwMyXll.cpp, select it so that it is added to you project.

20. Right Click on the XLL project and select 'Build'


Your functions
--------------

You can now add your C# functions into C# source files into project 'DotNet'
There is already a function in there and your function must be decorated in the same way, i.e a description 
for the function and descriptions for the paramters. Your functions must be public and static.


ENJOY !!!!

--------------------------------------------------------------------------------------------------------------------

TroubleShooting 
===============

1. Everytime you open the xll in Excel it complains that it cannot recognise the format of the file.

   Firstly ensure that directoru into which your dll#s and xll are bult is on your Path. If you have already got
   Excel open , close it and re-open it otherwise the new value for the Path is no seen.

   If that doesn't work it could because you do have an old version of Excel ( I had this problem on Excel 2002 ) 
   and it is not loading the correct .NET runtime. You need to place a file called Excel.exe.config the 
   same directory as Excel.exe.
	
	my config file looks like this
   
  <?xml version="1.0"?>
     <configuration>
       <startup>
         <supportedRuntime version="v2.0.50727"/>
       </startup>
     </configuration>

 
    
-----------------------------------------------------------------------------------------------------------------

Narinder Claire


Copyright (C) 2008 Narinder Claire

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    Neither the names of the copyright holders nor the names of the XLW
    Group and its contributors may be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




















































   
