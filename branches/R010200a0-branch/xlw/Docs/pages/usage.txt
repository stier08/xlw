
/*! \page usage Usage
    To use XLW just add
    \code
    #include <xlw/xlw.h>
    \endcode
    at the beginning of your source/header files.

    Under the Examples folder you can find examples of XLW usage,
    and the \ref gettingstarted section comments the examples.


    \subsection microsoftvisual Microsoft Visual C++
    A few suggestions for Visual C++ users wanting to use %XLW into their
    own application:
    -# As long as you include xlw/xlw.h, you won't have to explicitly
    link your application to xlw.lib (or xlwd.lib). This is
    automatically done with a pragma statement:
    \code
    #ifdef _DEBUG
        #pragma comment(lib,"xlwd.lib")
    #else
        #pragma comment(lib,"xlw.lib")
    #endif
    \endcode
    -# Your main() must be compiled with the same options that were used in
    compiling the %XLW library - namely, you'll have to set the run-time
    library to "Multithreaded DLL" or "Debug Multithreaded DLL" depending on
    whether you're linking to xlw.lib or xlwd.lib, respectively.
    This setting is in the project settings, "C/C++" tab, "Code Generation"
    category.
    You'll have to check the "Use RTTI" option under the "C++ Language"
    category, too.
    -# To create your own project, add it to a new or existing Workspace.
    Under File | New | Projects select "Win32 Console Application" (or
    equivalent).
    Under Project | Settings select your project. Select settings for: "All
    configuration".
    On the "C/C++" tab select "Preprocessor" and under "Additional include
    directory" add "\$(XLW_DIR)". This will add your current %XLW
    installation directory to the include path.
    On the "Link" tab select "Input" and under "Additional library path" add
    "\$(XLW_DIR)\lib\Win32\VisualStudio\". This will add your current %XLW
    installation directory to the library path.
    -# The "Win32 OnTheEdgeRelease" and "Win32 OnTheEdgeDebug" configurations
    are equivalent to "Win32 Release" and "Win32 Debug" respectively, except
    that they do not use the installed %XLW libraries, but look for the
    headers and lib files in a relative ..\\%xlw path. This is
    mainly for %XLW developers, to allow them to check the examples
    without having to install their unstable working version of %XLW.
    The "OnTheEdge" approach may be adopted in projects using %XLW,
    allowing for a quick and easy way to check how the projects work with a
    new %XLW release without having to install it.

*/

