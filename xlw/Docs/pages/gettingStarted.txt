
/*! 

\page gettingstarted Getting started

You will find in the example project the file xlwExample.cpp. Let us look
at the code it contains. It will give you a good idea of the way
you are supposed to use the package.

Don't forget to start by including the following
header.

[FIXME reference to nonexistent example file]

Enclose the interface function in a extern "C" block as you are going
to expose \ref IsItCpp "only C functions" to Excel. This is linked to the
C nature of the Excel API used by the framework. You might want to
consider using the more complicated \ref WhenCom "COM interface" if it
is too much of a problem for you. Note however that nothing prohibits you
to forward (as I normally do) the call to your C API towards an other
library written in C++.

[FIXME reference to nonexistent example file]

Let us start with the function you integrate in Excel. You
should start by checking that these four recomendations hold for any
C function to be registered into Excel:
- Flag the function with the preprocessor macro EXCEL_EXPORT
which currently evaluate to __declspec(dllexport). It tells the
linker to export the function. Excel won't see it if you fail to
do so.
- Enclose the function body between the two macros EXCEL_BEGIN
and EXCEL_END. They hide a little memory management (see
XlfExcel::FreeMemory)and guard Excel against eventual exception
thrown by your function.
- Declare all function arguments (passed by Excel) as XlfOper,
XlfConstOper, or one of the standard POD type of C (long, double,
char *...).
- Prototype your function as returning an LPXLOPER.

The following function takes the diameter of a circle as an argument
and compute the circumference of this circle.

[FIXME reference to nonexistent example file]

Here is an other example of function to be registered. This one takes
two strings as argument and returns their conacatenation.

[FIXME reference to nonexistent example file]

This function is a little longer. It shows how to deal with range
references and return numeric arrays. It takes a range reference and
computes the average and the variance of the population and returns it
in a (1x2) array.

[FIXME reference to nonexistent example file]

Some function can take a long time to compute and one might not want
to give the the user interface provided by the function wizard. In
order for your function to know if it is being called from the function
wizard, one can call XlfExcel::IsCalledByFuncWiz as shown bellow. This
last function also demonstrates how to call a regular excel routine like
xlfCall (see the file xlcall32.h for an exhaustive list) using xlw 
classes. Here the function will return the coordinates of the calling
cell.

[FIXME reference to nonexistent example file]

Once your functions are written, you should export (with EXCEL_EXPORT)
a function called \c xlAutoOpen that registers to Excel the
function(s) you want to call from Microsoft Excel as shown bellow. Note
that the class Win32StreamBuf is graciously donnated as part of the xlw
distribution you can choose to ignore it and replace it with your own
logging mechanism.

If Microsoft Excel can locate \c xlAutoOpen, it automatically calls
it when the DLL (or XLL) is loaded.

[FIXME reference to nonexistent example file]

Also when the xll is not needed anymore, Excel call xlAutoClose where
we can add some ressource deallocation.

[FIXME reference to nonexistent example file]

Finally we close the extern "C" block.

[FIXME reference to nonexistent example file]

Compile and link the dll in multi-threaded mode and load the dll from
the file menu of Microsoft Excel or by putting it in the start directory.
You might eventually rename your dll as xll to make the type of the file
more explicit. A demo Excel spreadsheet that uses the functions described
above is enclosed with the project.

Enjoy !

*/

