

** These are premliminary INSTALL notes for use by XLW developers and for testing **
08 Apr 09
Narinder Claire



1.PRE-REQUISITE
===============

  1.1 Visual Studio environment
  -----------------------------

   Developing with xlwDotNet requires one of the following Microsoft Visual Studio environments :

   1. MicroSoft Visual Studio 2008 with both C++ and C# installed.                      (VS9_PRO) 
   2. MicroSoft Visual Studio 2005 with both C++ and C# installed.                      (VS8_PRO) 
   3. Visual Studio 2008 Express Editions C++ & Visual Studio 2008 Express Editions C#  (VS9_EXPRESS)
   4. Visual Studio 2005 Express Editions C++ & Visual Studio 2005 Express Editions C#  (VS8_EXPRESS)

   There is no support for Visual Studio 2002 & 2003 and none is planned.


     1.1.1 Extra requirement with Visual Studio 2005 Express Edition (Vs8_EXPRESS)
     '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
     Visual C++ 2005 Express is not shipped with the Microsoft Platform SDK.
     This is a pre-requisite for building xlw.


     It can be downloaded from 

	http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&displaylang=en

     If you are using the Express edition of Visual C++ 2005, you need to install this first.

     The standard package will install to C:\Program Files\Microsoft SDKs\Windows.

     You need to set the environment Variable PSDK to the path of the SDK. 
     For me  the variable PSDK is set to 

                  C:\Program Files\Microsoft SDKs\Windows\v6.1

     on one machine and set to 


                  C:\Program Files\Microsoft SDKs\Windows\v6.0A

     on a different machine.


    If you already had Visual Studio open when you set the environment variable PSDK
    you have to close it and re-open it for the new environment variable to be recognised.

    These extra few steps are only neccassary for the EXPRESS edition of VC 2005.
    They are NOT neccassary for Visual C++ 2005 Professional.


----------------------------------------------------------------------------------------------------


2.INSTALLING XLWDOTNET
======================

   2.1 Obtaining xlwDotNet
   -----------------------
   At the moment you need to checkout the xlwNet branch of the xlw source tree from the sourceforge SVN repositry.
   The instructions and exact location can be found on Sourceforge.
   Source tree root will then look as follows.
   
   xlwnet
         |_____xlw
         |        |__build
         |        |__dev_tools
         |        |__docs
         |        |__examples
         |        |__include
         |        |__InterfaceGenerator
         |        |__lib
         |        |__src
         |        |__ ..... some files
         |
         |__xlwNet
         |         |__DotNet
         |         |__lib
         |         |__ ... some files
	 |
         |__xlw-site

 

   2.2 Adding the XLW Enviromnet Variable
   --------------------------------------
   You need to create a new enviroment variable XLW. This environment value must be set to the value of
   the path to xlwnet (inclusive of xlwnet), the root of the source code tree. For me this is 
           XLW = C:\xlwdownload\xlwnet
   


----------------------------------------------------------------------------------------------------

3.BUILDING XLWDOTNET
====================

   2.1 Building xlw
   ----------------

   xlw is a pre-requisite for xlwDotNet and therefore must be built first.

   If you environment is VS9_PRO or VS9_EXPRESS then you will find the VS Solution file xlw.sln
   in xlwnet\xlw\build\vc9
   
   If you environment is VS8_PRO or VS8_EXPRESS then you will find the VS Solution file xlw.sln
   in xlwnet\xlw\build\vc8  

   Build xlw.sln and its best to have both Debug and Release builds.


   2.2 Building xlwDotNet
   ----------------------
   In directory xlwnet\xlwNet\DotNet\Build you will find 2 sub-directories :
       VS9
       VS8

   In the directory corresponding to your version of Visual Studio, you will find the Solution xlw.NET.sln
   Build this, preferably in both Build & Release.

   
   
---------------------------------------------------------------------------------------------------------

3. THE EXAMPLE 
==============

   3.1 Building The Example
   ------------------------
   In directory xlwnet\xlwNet\DotNet\Example you will find 2 directories :
       VS9
       VS8
     

   In the directory corresponding to your version of Visual Studio, you will find the Solution Example.sln
   Build this in Debug. Ensure that the configuration is indeed set to Debug.

  
   3.2 Setting the Path 
   ---------------------
   In the directory xlwnet\xlwNet\DotNet\Example\VS*\Debug (where * corresponds to your Visual Studio environment)
   you should see, amongst others, the following files 

       Example.NET.dll
       ExampleC.dll
       Example.xll
       xlwDotNet-vc**-mt-gd.dll


   Some of these DLLs have to be found by excel at runtime. so will add the directory to the path.
   Append xlwnet\xlwNet\DotNet\Example\VS*_***\Debug to the Path variable.
  

  
 Steps 3.2 only has to be done after the first build, then you can continue to play with the Example and
building the xll without having to do those steps. 
The only time you will have to repeat step 3.2 are when :

1.  You Do a Release Build. ( since you will want the Release directory on your Path not the Debug AND your new Assembly
                              search path is the Release directory and not the Debug directory)

2.  You build the xll under a different VS enviroment ( for similar reason to 1)

3.  You add an extra Assembley to your Project. You may for example have existing C# Assembly which you would like 
    to reference in you DotNet Project ( the project containg your C# functions being exported to Excel).
    Then when you build, your new Excel.config.exe file have a reference to this new Assembly that Excel needs to find.
    So you  need to copy the Excel.onfig.exe file to the same Directory as your Excel.exe executable overwritinng the original.

    

---------------------------------------------------------------------------------------------------------


4. YOUR OWN XLL
===============

   4.1 Obtaining the Template Project
   ----------------------------------

   In directory xlwnet\xlwNet\DotNet\Template you will find 2 sub-directories :
       VS9 
       VS8

   Copy the directory corresponding to your Visual Studio environment to wherever you would like to place
   the source code for your new xll project. Preferably do not make it a sub directory of the xlw source tree.

    4.2 Naming your Library
   ------------------------
   
   The name of you xll addin and associated libraries, will be taken from the names of the Visual Studio Solutions NOT the
   constituent Visual Studio Projects.
   We will change the name in 3 places.

   i.   Change the name of the directory you have just copied in 4.1 from VS* to MyLib, replacing MyLib 
        with the name of your Library.
   
   ii.  In this directory  You will find a C# Solution file called Template.sln, change the name to MyLib.sln
        replacing MyLib  with the name of your Library.

   iii. Also in this directory you will find a sub-directory Addin, in this sub directory you will see a C++ Solution file
        Template.sln. Change the name of this to MyLib.Sln  replacing MyLib  with the name of your Library.

   iv.  You can now open with Visual Studio the original renamed Solution file (i.e the one u renamed in (ii) )
        Build this  Solution to see if everything is ok. If not check your variable XLW is set correctly.

   v.   Now follow step 3.2 ( ie add directory to the path) but with the Debug directory in your project.

   
   4.3 Adding your own functions
   -----------------------------

   The parameter and return types of you functions can be :

     MyMatrix
     MyArray
     double[]
     double[,]
     string
     double
     int
     CellMatrix
     ArgumentList


   When you write your functions :

   i.   Decorate each function with the attribute
        [ExcelExport("function description goes here")]

   ii.  Decorate each parameter with the attribute
        [Parameter("parameter description goes here ")]

   iii. Ensure the function is public and static. Ensure that the
        method is in a Public class.

   iv.  The C# Assembley containing the code is a Class Library
 

   A function would then look like this :

        [ExcelExport("returns the diff of two cell ranges")]
        public static CellMatrix DiffRange(
                 [Parameter("The first  Cell Range")] CellMatrix A,
                 [Parameter("The second Cell Range")] CellMatrix B
                   )
          {
            ....
          }
  
   
   Your functions must be Public & static and in a Public class.



Thats it for now

ENJOY !!!!


--------------------------------------------------------------------------------------------------------------------

5. TroubleShooting 
==================

1. Everytime you open the xll in Excel it complains that it cannot recognise the format of the file.

   Firstly ensure that directoru into which your DLLs and XLL are bult is on your Path. If you have already got
   Excel open , close it and re-open it otherwise the new value for the Path is not seen. 
   I tend to get this error ( almost always ) when one of the Dlls that your XLL relies on cannot be found, and 
   this is the directory containg it is not on the Path.

2. You Open Excel, open you XLL addin and everything seem to work fine. You can even see all your addin functions
   in the function List under the Category with the same name as your Library. BUT if you try to evaluate any function, 
   Excel crashes.
   Most likely Excel can not find your Assemblies. 

3. You addin just refuses to load. 
   Some versions of Excel do not load the correct .NET Runtime. We are
   using .NET 3.5 and I believe Excel 2002 does not load this at startup,
   where as Excel 2007 does. There is a work around for this.
   Create a file called Excel.exe.config with contents :
   
    <?xml version="1.0"?>
    <configuration>
	<startup>
		<supportedRuntime version="v2.0.50727" />
	</startup>
    </configuration>

   and put it in the same directory as the excel executable.
   Some other reading on this issue 

   http://stackoverflow.com/questions/436958/-net-app-config-question
   http://krgreenlee.blogspot.com/2006/01/software-running-excel-with-net-11.html
   http://msdn.microsoft.com/en-us/library/w4atty68.aspx
      

   

    
-----------------------------------------------------------------------------------------------------------------


6. Other Features.
=================

1. Hybrid library . With both C# AND C++ functions.

   This is in fact what I have for my own use and it is very easy to setup. NO extra developemnt is required just tinkering
   with the project files I plan to add this feature for the end-user after the current setup is tested and deemed close
   to first release.

2. A program that gets built alongside the xll and into the same directory, which when run automaticaly sets up the Path and
   automaticaly puts Excel.config.exe into the excel directory. 

   Lets see if we really want this first. Also we may not want to overider the Excel.config.exe file but rather append to it

3. An extra attribute on exportable functions, 'Long Description' and an program that can use reflection on an assembly
   reading the attributes on the exported function, producing on the ly documenation.

   This would be VERY useful, just need the time to do it :-)



-------------------------------------------------------------------------------------------------------------------


Copyright (C) 2008 2009  Narinder Claire

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    Neither the names of the copyright holders nor the names of the XLW
    Group and its contributors may be used to endorse or promote products
    derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




















































   