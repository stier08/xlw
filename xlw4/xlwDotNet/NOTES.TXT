

This is a note to contributors


 xlw.NET allows the developer to write Excel addins ( xlls addins not COM addins ) in C# 
( an hence in any of the .NET languages )

-----------------------------------------------------------------------------------------------------

The process by which C# xlls are produced is as roughly as follows


1. MyLib.NET.dll

   Your C# xll functions are placed in a C# Assembly MyLib.NET.dll where you:
 
   i. Decorate each function with the attribute
      [ExcelExport("function description goes here")]

  ii. Decorate each parameter with the attribute
      [Parameter("parameter description goes here ")]

 iii. Ensure the function is public and static.

  iv. C# Assembley containing the code is a Class Library
 
  A function would then look like this :

        [ExcelExport("returns the diff of two cell ranges", volatileFlag = false)]
        public static CellMatrix DiffRange(
        [Parameter("The first  Cell Range")] CellMatrix A,
        [Parameter("The second Cell Range")] CellMatrix B
            )
        {
          ....
        }

2. DotNetInterfaceGenerator
   After the C# Assembley is built the program DotNetInterfaceGenerator is run.
   This program uses .NET Reflection to extract infomation about all appropriatley 
   decorated functions and generates a C++ header file and source file with 
   the corresponding bindings. The resulting C++ source code is actualy Pure C++ and C++/CLI (C++ 
   targeted to the .NET Framework)

3. MyLibC.dll
   The source code generated by DotNetInterfaceGenerator is built into a DLL
   by Dynamically linking to the xlwDotNet DLL.
   


4. InterfaceGenerator
   The resulting header file from the (2) is then parsed by InterfaceGenerator
   (from the vanilla xlw) to generate the source code xlwXLL.cpp, with the xlw Excel bindings.

5. MyLib.xll 
   The XLL addin is built from the source code generated from 4 into a an XLL.


************************************************************************************************************
***********************************************************************************************************

  ***********     AS OF 2009-04-19 THE FOLLOWING PHASE IS NO LONGER NECCASSARY. **********************
  ***********  A WORK AROUND WAS FOUND  AT 

     http://stackoverflow.com/questions/93770/eefileloadexception-when-using-c-classes-in-cwin32-app

  *********** I AM KEEPING IT HERE TEMPORARILY FOR INFORMATION ******************************************** 


6. Excel.config.exe
   In the same way a program needs to find the DLLs it depends on at runtime, a program 
   also needs to find the .NET Assemblies it depends on at runtime. With native DLLs we normally either
   put them in the same directory as the executable or add the directory containing them to
   the PATH.

   For .NET Assemblies, we can :

   i.  put them in the same directory (or a subdirectory) as the executable,
   2.  put them in the GAC ( Global Assembly Cache)  OR
   3.  put a file 'program.config.exe' ( where 'program' is the name of the excutable) an dxml file containing
       the paths of the Assemblies, into the same directory as the executeble

   In xlwDotNEt we opt for the 3rd option.
   So the program ExcelConfigurator is run to generate excel.config.exe and it is up to the user
   to put this into the same directory as the excel.exe executable.
   But generaly this only has to be done the first time you build the xll. After that, only if you change the 
   place where your XLL and C# Assembly  builds OR when you add an extra assembly. 
 

************************************************************************************************************
***********************************************************************************************************
************************************************************************************************************
***********************************************************************************************************


In the build directory we then have three dlls : MyLib.NET.dll, MyLibC.dll & MyLib.xll ( in the dependency order) 


Note: The reason the C wrapper code generated in step 2 and built into a dll in step 3
      is put into a dll of its own instead of being put directly in the .xll is because it is C++/CLI and needs 
      to be compiled with /clr compile option. But the .xll will not build with this option.


Note: Development environment must be Microsoft Visual Studio 2008 Express, 2008 Professional, 2005 Express or 2005 Professional
      or equivlent. No support for earlier versions (2002 & 2003) of Visual Studio is planned. This is because step relies on
      C++/CLI. VS2003 was shipped with its predecessor Managed C++, different enough to warrant too much time, effort & energy 
      for the very limited upside, but thats IMHO :-)

 


April 2009
Narinder Claire

      

 =